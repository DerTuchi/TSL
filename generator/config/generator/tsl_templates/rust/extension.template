{% set ns = namespace(
   default_vector_size=0) %}
{% if simdT_default_size_in_bits == 0 %}
   {% set ns.default_vector_size = "std::mem::size_of::<BaseType>*8" %}
{% else %}
   {% set ns.default_vector_size = simdT_default_size_in_bits %}
{% endif %}
// Trait to select {{ extension_name }} register_type
pub trait SelectRegister{{ extension_name }} {
    type Output;
}
{% if register_type_mapping %}
macro_rules! impl_register_{{extension_name}} {
    ($($val:ty => $reg:ty),*) => {
        $(impl SelectRegister{{extension_name}} for $val {
            type Output = $reg;
        })*
    };
}
impl_register_{{extension_name}}!{
    {% for entry in register_type_mapping %}
    {% if not loop.last %}
        {% set comma = ', ' %}
    {% else %}
        {% set comma = '' %}
    {% endif %}
    {{ entry[0] }} => {{ entry[1] }}{{comma}}
    {% endfor %}
}
{% else %}
impl<T: TSLArithmetic> SelectRegister{{extension_name}} for T{
    type Output = T;
}
{% endif %}

// Trait to select Imask Type
pub trait SelectImask{{extension_name}}{
    type Output;
}
{% if imask_mapping %}
macro_rules! impl_imask_{{extension_name}} {
    ($($val:ty => $reg:ty),*) => {
        $(impl SelectImask{{extension_name}} for $val {
            type Output = $reg;
        })*
    };
}

impl_imask_{{ extension_name }}!{
    {% for entry in imask_mapping %}
    {% if not loop.last %}
        {% set comma = ', ' %}
    {% else %}
        {% set comma = '' %}
    {% endif %}
     {{ entry[0] }} => {{ entry[1] }}{{comma}}
    {% endfor %}
}
{% else %}
impl<T: TSLArithmetic> SelectImask{{extension_name}} for T{
    type Output = u8; // maybe use bool instead?
}
{% endif %}

pub struct {{ extension_name }}<T: TSLArithmetic>(pub PhantomData<T>);
impl<T> {{ extension_name }}<T> 
where
    T : TSLArithmetic + SelectRegister{{ extension_name }} + SelectImask{{ extension_name }} + SelectOffsetBaseType,
        <T as SelectOffsetBaseType>::Output: SelectRegister{{ extension_name }}
{
    const DEFAULT_SIZE_IN_BITS : usize = {{ns.default_vector_size}};

    pub const fn vector_size_b() -> usize{
        Self::DEFAULT_SIZE_IN_BITS
    }
    pub const fn vector_size_bytes() -> usize{
        Self::vector_element_count() * std::mem::size_of::<T>()
    }
    pub const fn vector_element_count() -> usize{
        Self::vector_size_b() / (std::mem::size_of::<T>() * 8)
    }
    pub const fn vector_alignment() -> usize {
        if Self::vector_size_bytes() > 32 {
            64
        } else {
            Self::vector_size_bytes()
        }
    }
    pub const fn vector_mask_ratio() -> usize {
        (std::mem::size_of::<<Self as TargetExtension>::MaskType>() * 8) / Self::vector_element_count()
    }
    pub const fn mask_shift() -> usize {
        Self::vector_element_count()
    }
}

impl<T> TargetExtension for {{ extension_name }}<T>
where
    T : TSLArithmetic + SelectRegister{{ extension_name }} + SelectImask{{ extension_name }} + SelectOffsetBaseType,
        <T as SelectOffsetBaseType>::Output: SelectRegister{{ extension_name }}
{
    const DEFAULT_SIZE_IN_BITS : usize = Self::DEFAULT_SIZE_IN_BITS;
    type BaseType = T;
    {% if register_type_rust %}
    type RegisterType = {{ register_type_rust }};
    {% else %}
    type RegisterType = <T as SelectRegister{{ extension_name }}>::Output;
    {% endif %}
    {% if mask_type_rust %}
    type MaskType = {{ mask_type_rust }};
    {% else %}
    type MaskType = {{ simdT_mask_type }};
    {% endif %}
    type ImaskType = <T as SelectImask{{ extension_name }}>::Output;
    type OffsetBaseType = <T as SelectOffsetBaseType>::Output;
    type OffsetBaseRegisterType = <Self::OffsetBaseType as SelectRegister{{ extension_name }}>::Output;
}