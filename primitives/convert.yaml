---
name: "convert"
description: "Conversion primitives."
...
---
primitive_name: "cast_reinterpret"
return_template_parameter: "ToType"
parameters:
  - ctype: "const typename Vec::register_type"
    name: "data"
returns:
  ctype: "typename ToType::register_type"
  description: ""
definitions:
#INTEL - AVX512
  - target_extension: "avx512"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
    return_vector_base_type: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
    lscpu_flags: ["avx512f"]
    implementation: "return data;"
  - target_extension: "avx512"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    return_vector_base_type: ["float"]
    lscpu_flags: ["avx512f"]
    implementation: "return _mm512_castsi512_ps(data);"
  - target_extension: "avx512"
    ctype: ["float"]
    return_vector_base_type: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    lscpu_flags: ["avx512f"]
    implementation: "return _mm512_castps_si512(data);"
  - target_extension: "avx512"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    return_vector_base_type: ["double"]
    lscpu_flags: ["avx512f"]
    implementation: "return _mm512_castsi512_pd(data);"
  - target_extension: "avx512"
    ctype: ["double"]
    return_vector_base_type: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    lscpu_flags: ["avx512f"]
    implementation: "return _mm512_castpd_si512(data);"
#INTEL - AVX2
  - target_extension: "avx2"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
    return_vector_base_type: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
    lscpu_flags: ["avx"]
    implementation: "return data;"
  - target_extension: "avx2"
    ctype: ["int8_t"]
    return_vector_base_type: ["uint8_t", "uint16_t", "int16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    lscpu_flags: ["avx"]
    implementation: "return data;"
  - target_extension: "avx2"
    ctype: ["uint8_t"]
    return_vector_base_type: ["int8_t", "uint16_t", "int16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    lscpu_flags: ["avx"]
    implementation: "return data;"
  - target_extension: "avx2"
    ctype: ["int16_t"]
    return_vector_base_type: ["int8_t", "uint8_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    lscpu_flags: ["avx"]
    implementation: "return data;"
  - target_extension: "avx2"
    ctype: ["uint16_t"]
    return_vector_base_type: ["int8_t", "uint8_t", "int16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    lscpu_flags: ["avx"]
    implementation: "return data;"
  - target_extension: "avx2"
    ctype: ["int32_t"]
    return_vector_base_type: ["int8_t", "uint8_t", "int16_t", "uint16_t", "uint32_t", "int64_t", "uint64_t"]
    lscpu_flags: ["avx"]
    implementation: "return data;"
  - target_extension: "avx2"
    ctype: ["uint32_t"]
    return_vector_base_type: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "int64_t", "uint64_t"]
    lscpu_flags: ["avx"]
    implementation: "return data;"
  - target_extension: "avx2"
    ctype: ["int64_t"]
    return_vector_base_type: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "uint64_t"]
    lscpu_flags: ["avx"]
    implementation: "return data;"
  - target_extension: "avx2"
    ctype: ["uint64_t"]
    return_vector_base_type: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t"]
    lscpu_flags: ["avx"]
    implementation: "return data;"
  - target_extension: "avx2"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    return_vector_base_type: ["float"]
    lscpu_flags: ["avx"]
    implementation: "return _mm256_castsi256_ps(data);"
  - target_extension: "avx2"
    ctype: ["float"]
    return_vector_base_type: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    lscpu_flags: ["avx"]
    implementation: "return _mm256_castps_si256(data);"
  - target_extension: "avx2"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    return_vector_base_type: ["double"]
    lscpu_flags: ["avx"]
    implementation: "return _mm256_castsi256_pd(data);"
  - target_extension: "avx2"
    ctype: ["double"]
    return_vector_base_type: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    lscpu_flags: ["avx"]
    implementation: "return _mm256_castpd_si256(data);"
#INTEL - SSE
  - target_extension: "sse"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
    return_vector_base_type: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
    lscpu_flags: ["sse"]
    implementation: "return data;"
  - target_extension: "sse"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    return_vector_base_type: ["float"]
    lscpu_flags: ["sse2"]
    implementation: "return _mm_castsi128_ps(data);"
  - target_extension: "sse"
    ctype: ["float"]
    return_vector_base_type: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    lscpu_flags: ["sse2"]
    implementation: "return _mm_castps_si128(data);"
  - target_extension: "sse"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    return_vector_base_type: ["double"]
    lscpu_flags: ["sse2"]
    implementation: "return _mm_castsi128_pd(data);"
  - target_extension: "sse"
    ctype: ["double"]
    return_vector_base_type: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    lscpu_flags: ["sse2"]
    implementation: "return _mm_castpd_si128(data);"
  #SCALAR
  - target_extension: "scalar"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
    return_vector_base_type: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
    lscpu_flags: []
    implementation: "return data;"
...
---
primitive_name: "cast_static"
return_template_parameter: "ToType"
parameters:
  - ctype: "const typename Vec::register_type"
    name: "data"
returns:
  ctype: "typename ToType::offset_register_type"
  description: "test"
definitions:
  #INTEL - AVX52
  - target_extension: "avx2"
    ctype: ["int16_t", "uint16_t"]
    return_vector_base_type: ["int64_t", "uint64_t"]
    lscpu_flags: ["avx2"]
    implementation: |
      auto x = _mm256_extracti128_si256(data, 0);
        auto y = _mm256_extracti128_si256(data, 1);  
        return { {
        _mm256_cvtepi16_epi64(x),
        _mm256_cvtepi16_epi64(_mm_bsrli_si128(x, 8)),
        _mm256_cvtepi16_epi64(y),
        _mm256_cvtepi16_epi64(_mm_bsrli_si128(y, 8)),
      } };
#  v2
#  auto shift = _mm256_set_epi64x(48 , 32, 16, 0);
#      auto andv  = _mm256_set1_epi64x(0xffff);
#      auto first  = _mm256_permute4x64_epi64(data, 0b00000000);
#      auto second = _mm256_permute4x64_epi64(data, 0b01010101);
#      auto third  = _mm256_permute4x64_epi64(data, 0b10101010);
#      auto fourth = _mm256_permute4x64_epi64(data, 0b11111111);
#      return
#        { {
#          _mm256_and_si256(_mm256_srlv_epi64(first, shift), andv),
#          _mm256_and_si256(_mm256_srlv_epi64(second, shift), andv),
#          _mm256_and_si256(_mm256_srlv_epi64(third, shift), andv),
#          _mm256_and_si256(_mm256_srlv_epi64(fourth, shift), andv)
#        } };
#  v3
#    alignas(32) std::array<uint16_t, 16> tmp{};
#    _mm256_store_si256(reinterpret_cast<__m256i *>(tmp.data()), data);
#    return {{
#    _mm256_set_epi64x(tmp[ 3], tmp[ 2], tmp[ 1], tmp[ 0]),
#    _mm256_set_epi64x(tmp[ 7], tmp[ 6], tmp[ 5], tmp[ 4]),
#    _mm256_set_epi64x(tmp[11], tmp[10], tmp[ 9], tmp[ 8]),
#    _mm256_set_epi64x(tmp[15], tmp[14], tmp[13], tmp[12])
#  }};

...