---
name: "compare"
description: "Compare primitives."
...
---
primitive_name: "equal"
brief_description: "Compares two vector registers for equality."
parameters:
   - ctype: "typename Vec::register_type"
     name: "vec_a"
     description: "Left vector."
   - ctype: "typename Vec::register_type"
     name: "vec_b"
     description: "Right vector."
returns:
   ctype: "typename Vec::mask_type"
   description: "Vector mask type indicating whether vec_a[*]==vec_b[*]."
definitions:
#INTEL - AVX512
   - target_extension: "avx512"
     ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t"]
     lscpu_flags: ['avx512bw']
     specialization_comment: "Signed comparison."
     implementation: "return _mm512_cmpeq_epi{{ intrin_tp[ctype][1] }}_mask(vec_a, vec_b);"
   - target_extension: "avx512"
     ctype: ["int32_t", "uint32_t", "int64_t", "uint64_t"]
     lscpu_flags: ['avx512f']
     specialization_comment: "Signed comparison."
     implementation: "return _mm512_cmpeq_epi{{ intrin_tp[ctype][1] }}_mask(vec_a, vec_b);"
   - target_extension: "avx512"
     ctype: ["float", "double"]
     lscpu_flags: ['avx512f']
     implementation: "return _mm512_cmpeq_{{ intrin_tp_full[ctype] }}_mask(vec_a, vec_b);"
#todo: Implement 128/256 bit variants.
#todo: Conceptional challenge: simd<T, avx512, 256> as Processingstyle would require all primitives to have a related definition... Maybe implement a cast?
#INTEL - AVX2
   - target_extension: "avx2"
     ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
     lscpu_flags: ['avx2']
     specialization_comment: "Signed comparison."
     implementation: "return _mm256_cmpeq_epi{{ intrin_tp[ctype][1] }}(vec_a, vec_b);"
   - target_extension: "avx2"
     ctype: ["float"]
     lscpu_flags: ['avx', 'avx2']
     specialization_comment: "Signed comparison."
     is_native: False
     implementation: "return _mm256_castsi256_ps(_mm256_cmpeq_epi32(_mm256_castps_si256(vec_a), _mm256_castps_si256(vec_b)));"
   - target_extension: "avx2"
     ctype: ["double"]
     lscpu_flags: ['avx', 'avx2']
     specialization_comment: "Signed comparison."
     is_native: False
     implementation: "return _mm256_castsi256_pd(_mm256_cmpeq_epi64(_mm256_castpd_si256(vec_a), _mm256_castpd_si256(vec_b)));"
#INTEL - SSE
   - target_extension: "sse"
     ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t"]
     lscpu_flags: ['sse2']
     implementation: "return _mm_cmpeq_epi{{ intrin_tp[ctype][1] }}(vec_a, vec_b);"
   - target_extension: "sse"
     ctype: ["int64_t", "uint64_t"]
     lscpu_flags: ['sse4_1']
     specialization_comment: "Signed comparison."
     implementation: "return _mm_cmpeq_epi64(vec_a,vec_b);"
#ARM - NEON
   - target_extension: "neon"
     ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
     lscpu_flags: ['neon']
     implementation: "return vceqq_{{ intrin_tp_full[ctype] }}(vec_a, vec_b);"
#SCALAR
   - target_extension: "scalar"
     ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
     lscpu_flags: []
     implementation: "return (vec_a == vec_b);"
...
---
primitive_name: "between_inclusive"
brief_description: "Checks if the values of a vector are in a specific range (min[*] <= d[*] <= max[*])."
parameters:
   - ctype: "typename Vec::register_type"
     name: "vec_data"
     description: "Data vector."
   - ctype: "typename Vec::register_type"
     name: "vec_min"
     description: "Minimum vector."
   - ctype: "typename Vec::register_type"
     name: "vec_max"
     description: "Maximum vector."
returns:
   ctype: "typename Vec::mask_type"
   description: "Vector mask type indicating whether the data is in the given range."
definitions:
#INTEL - AVX512
   - target_extension: "avx512"
     ctype: "int64_t"
     lscpu_flags: ['avx512f']
     implementation: "return _mm512_cmple_epu64_mask( vec_min, vec_data ) & _mm512_cmpge_epu64_mask( vec_max, vec_data );"
#INTEL - AVX2
   - target_extension: "avx2"
     ctype: "int64_t"
     lscpu_flags: [ 'avx2' ]
     note: "EPI64 INSTEAD OF EPU64!!!"
     implementation: "return _mm256_andnot_si256( _mm256_cmpgt_epi64( vec_min, vec_data ), _mm256_andnot_si256( _mm256_cmpgt_epi64( vec_data, vec_max ), _mm256_set1_epi64x(-1)));"
#INTEL - SSE
   - target_extension: "sse"
     ctype: "int64_t"
     lscpu_flags: [ 'sse2', 'sse4_2' ]
     note: "EPI64 INSTEAD OF EPU64!!!"
     implementation: "return _mm_andnot_si128( _mm_cmpgt_epi64( vec_min, vec_data ), _mm_andnot_si128( _mm_cmpgt_epi64( vec_data, vec_max ), _mm_set1_epi64x(-1)));"
#ARM - NEON
   - target_extension: "neon"
     ctype: "int64_t"
     lscpu_flags: [ 'neon' ]
     implementation: "return vandq_u64( vcgeq_s64( vec_data, vec_min ), vcleq_s64( vec_data, vec_max ) );"
...
