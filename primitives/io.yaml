---
name: "io"
description: "Input/Output primitives."
...
---
primitive_name: "to_ostream"
brief_description: "Loads data from aligned memory into a vector register."
includes: ['<ostream>', '<iomanip>']
parameters:
   - ctype: "std::ostream &"
     name: "out"
     description: ""
   - ctype: "typename Vec::register_type const"
     name: "data"
     description: ""
returns:
   ctype: "std::ostream &"
   description: ""
definitions:
#INTEL - AVX512
   - target_extension: "avx512"
     ctype: "int64_t"
     lscpu_flags: ['avx512f']
     implementation: |
         for(auto idx = 0; idx < 8; ++idx ) {
            out << data[7-idx] << "|";
         }
         out << "\n";
         return out;
#INTEL - AVX2
   - target_extension: "avx2"
     ctype: ["int32_t", "int64_t", "uint32_t", "uint64_t", "float", "double"]
     lscpu_flags: [ 'avx' ]
     implementation: |
        for(std::size_t idx = 0; idx < Vec::vector_element_count(); ++idx ) {
                       out << std::setw(20) << (Vec::base_type) data[(Vec::vector_element_count()-1)-idx] << "|";
                    }
                    out << "\n";
                    return out;
   - target_extension: "avx2"
     ctype: ["int8_t", "int16_t"]
     lscpu_flags: [ 'avx' ]
     implementation: |
       for(std::size_t idx = 0; idx < Vec::vector_element_count(); ++idx ) {
                      out << std::setw(20) << (int)data[(Vec::vector_element_count()-1)-idx] << "|";
                   }
                   out << "\n";
                   return out;
   - target_extension: "avx2"
     ctype: ["uint8_t", "uint16_t"]
     lscpu_flags: [ 'avx' ]
     implementation: |
       for(std::size_t idx = 0; idx < Vec::vector_element_count(); ++idx ) {
                      out << std::setw(20) << (unsigned)data[(Vec::vector_element_count()-1)-idx] << "|";
                   }
                   out << "\n";
                   return out;
#INTEL - SSE
   - target_extension: "sse"
     ctype: "int64_t"
     lscpu_flags: [ 'sse2' ]
     implementation: |
         out << data[1]<< "|" << data[0] << "\n";
         return out;
#ARM - NEON
   - target_extension: "neon"
     ctype: "int64_t"
     lscpu_flags: [ 'neon' ]
     implementation: |
         out << data[1]<< "|" << data[0] << "\n";
         return out;
...