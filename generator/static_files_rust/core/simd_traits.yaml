---
file_description: "Traits for TargetExtension and Primitive Impl handling."
includes:
   - 'super::TSLArithmetic'
implementations:
   - |
    pub trait SimdPrimitiveImpl{
      type Args;
      type ReturnType;
      type BaseType;
      type TargetExtension;
      type AdditionalParam;
      type RegisterType;
      type ImaskType;
      type MaskType;
      type OffsetBaseType;
      type OffsetBaseRegisterType;
      const is_native: bool;
      const check: ();

      fn parameters_queryable() -> bool;
      fn has_return_value() -> bool;
      fn native_supported() -> bool;
      fn apply(args: Self::Args) -> Self::ReturnType;
    }

    pub trait TargetExtension{
      const DEFAULT_SIZE_IN_BITS : usize;
      type BaseType: TSLArithmetic;
      type RegisterType;
      type MaskType;
      type ImaskType;
      type OffsetBaseType: TSLArithmetic;
      type OffsetBaseRegisterType;
    }
    
    // Trait to select OffsetBaseType
    pub trait SelectOffsetBaseType {
        type Output : TSLArithmetic;
    }
    macro_rules! impl_signed_to_unsigned {
        ($($signed:ty => $unsigned:ty),*; $($selfmap:ty),*) => {
            // Map signed types to their unsigned equivalents
            $(impl SelectOffsetBaseType for $signed where $signed : TSLArithmetic {
                type Output = $unsigned;
            })*

            // Map unsigned types to themselves
            $(impl SelectOffsetBaseType for $selfmap where $selfmap : TSLArithmetic{
                type Output = $selfmap;
            })*
        };
    }
    impl_signed_to_unsigned!{
        i8 => u8,
        i16 => u16,
        i32 => u32,
        i64 => u64,
        i128 => u128,
        isize => usize,
        f32 => u32,
        f64 => u64;
        u8, u16, u32, u64, u128, usize
    }
...
