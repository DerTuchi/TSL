---
name: "mask"
description: "Mask related primitives."
...
---
primitive_name: "to_integral"
brief_description: "Forms an integral value from the most significant bits of every lane in a vector mask register."
parameters:
   - ctype: "const typename Vec::mask_type"
     name: "vec_mask"
     description: "Vector mask register containing mask style data."
returns:
   ctype: "typename Vec::imask_type"
   description: "Integral value representing of the vector mask register."
testing: #optional
   -  test_name: "mask_match_zero_to_vec_count"
      requires: ["loadu"]
      includes: ["<cstddef>", "<array>"]
      implementation: |
         using T = typename Vec::base_type;
               bool allOk = true;
               // For Vec::mask_type == Vec::register_type testing
               std::array< T, Vec::vector_element_count() > pseudo_mask;
               typename Vec::mask_type vec_mask;
               for(std::size_t i = 0; i < Vec::vector_element_count() + 1; i++) {
                  // To check if we are at AVX512/Scalar or any register type mask
                  if constexpr (std::is_same_v<bool, typename Vec::mask_type>) {
                     // e.g. Scalar (bool)
                     vec_mask = false;
                     for ( std::size_t j = 0; j < i; ++j ) {
                        vec_mask = (vec_mask << 1) | 0b1;
                     }
                  } else if constexpr (std::is_same_v<typename Vec::mask_type, typename Vec::imask_type>) {
                     // // e.g. AVX512
                     vec_mask = 0;
                     typename Vec::mask_type one = 0b1;
                     for ( std::size_t j = 0; j < i; ++j ) {
                        vec_mask |= one << j;
                     }
                  } else {
                     // e.g. SSE, AVX2
                     pseudo_mask.fill( 0 );
                     T val = -1;
                     for ( std::size_t j = 0; j < i; ++j ) {
                        pseudo_mask[ j ] = val;
                     }
                     vec_mask = loadu<Vec>( pseudo_mask.data() );
                  }
                  auto mask_integral = to_integral<Vec>( vec_mask );
                  std::size_t matches = 0;
                  for ( std::size_t k = 0; k < Vec::vector_element_count(); ++k ) {
                    if(((mask_integral >> k) & 0b1) == 1 ) {
                      ++matches;
                    }
                  }
                  allOk &= (matches == i);
               }
               return allOk;
definitions:
#INTEL - AVX512
   - target_extension: "avx512"
     ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
     lscpu_flags: ['avx512f']
     implementation: "return vec_mask; //mask is integral already."
#INTEL - AVX2
   - target_extension: "avx2"
     ctype: ["int8_t", "uint8_t"]
     lscpu_flags: ['avx2']
     implementation: "return _mm256_movemask_epi8(vec_mask);"
   - target_extension: "avx2"
     ctype: ["int16_t", "uint16_t"]
     lscpu_flags: ['avx','avx2', 'bmi2']
     is_native: False
     implementation: "return _pext_u32(_mm256_movemask_epi8(vec_mask), 0x55555555);"
   - target_extension: "avx2"
     ctype: ["int16_t", "uint16_t"]
     lscpu_flags: ['avx', 'avx2']
     is_native: False
     implementation: |
       auto const packed = _mm256_packs_epi16(vec_mask, _mm256_setzero_si256());
                     auto const shuffled = _mm256_permute4x64_epi64(packed, 8);
                     return (typename Vec::imask_type) _mm256_movemask_epi8(shuffled);
#   - target_extension: "avx2"
#     ctype: ["int16_t", "uint16_t"]
#     lscpu_flags: ['avx', 'avx2']
#     is_native: False
#     implementation: |
#       __m256i shift = _mm256_set_epi32(16,16,16,16,0,0,0,0);
#                     __m256i vec_and = _mm256_set1_epi32(0xffff);
#                     __m256i res_vec_p1 = _mm256_and_si256(
#                        _mm256_srlv_epi32(
#                           _mm256_permute4x64_epi64(vec_mask, 0b01000100),
#                           shift
#                        ),
#                        vec_and
#                     );
#                     __m256i res_vec_p2 = _mm256_and_si256(
#                        _mm256_srlv_epi32(
#                          _mm256_permute4x64_epi64(vec_mask, 0b11101110),
#                          shift
#                        ),
#                        vec_and
#                     );
#                     uint16_t a = _mm256_movemask_ps(
#                        _mm256_castsi256_ps(
#                           _mm256_slli_epi32(
#                              _mm256_castps_si256(
#                                 _mm256_permute_ps(
#                                    _mm256_castsi256_ps(
#                                       _mm256_permute4x64_epi64(res_vec_p1, 216)
#                                    ),
#                                    216
#                                 )
#                              ),
#                              16
#                           )
#                        )
#                     );
#                     uint16_t b = _mm256_movemask_ps(
#                        _mm256_castsi256_ps(
#                           _mm256_slli_epi32(
#                              _mm256_castps_si256(
#                                 _mm256_permute_ps(
#                                    _mm256_castsi256_ps(
#                                       _mm256_permute4x64_epi64(res_vec_p2, 216)
#                                    ),
#                                    216
#                                 )
#                              ),
#                              16
#                           )
#                        )
#                     );
#                     return (b << 8) | a;
   - target_extension: "avx2"
     ctype: ["float"]
     lscpu_flags: ['avx']
     implementation: "return _mm256_movemask_ps(vec_mask);"
   - target_extension: "avx2"
     ctype: ["int32_t", "uint32_t"]
     lscpu_flags: ['avx']
     implementation: "return _mm256_movemask_ps(_mm256_castsi256_ps(vec_mask));"
   - target_extension: "avx2"
     ctype: ["int64_t", "uint64_t"]
     lscpu_flags: ['avx']
     implementation: "return _mm256_movemask_pd(_mm256_castsi256_pd(vec_mask));"
   - target_extension: "avx2"
     ctype: ["double"]
     lscpu_flags: ['avx']
     implementation: "return _mm256_movemask_pd(vec_mask);"
#INTEL - SSE
   - target_extension: "sse"
     ctype: ["int8_t", "uint8_t"]
     lscpu_flags: ['sse2']
     implementation: "return _mm_movemask_epi8(vec_mask);"
   - target_extension: "sse"
     ctype: ["int16_t", "uint16_t"]
     lscpu_flags: ['sse', 'sse2', 'bmi2']
     is_native: False
     implementation: "return _pext_u32(_mm_movemask_epi8(vec_mask), 0x5555);"
   - target_extension: "sse"
     ctype: ["int16_t", "uint16_t"]
     lscpu_flags: ['sse', 'sse2']
     is_native: False
     implementation: |
       return (typename Vec::imask_type)_mm_movemask_epi8(_mm_packs_epi16(vec_mask, _mm_setzero_si128()));
#   - target_extension: "sse"
#     ctype: ["int16_t", "uint16_t"]
#     lscpu_flags: ['sse', 'sse2']
#     is_native: False
#     implementation: |
#       vec_mask = _mm_shuffle_epi32(vec_mask, 0b11011000);
#                     vec_mask = _mm_shufflehi_epi16(vec_mask, 0b11011000);
#                     vec_mask = _mm_shufflelo_epi16(vec_mask, 0b11011000);
#                     uint16_t a = _mm_movemask_ps(
#                        _mm_castsi128_ps(
#                           _mm_slli_epi32(vec_mask, 16)
#                        )
#                     );
#                     uint16_t b = _mm_movemask_ps(
#                        _mm_castsi128_ps(vec_mask)
#                     );
#                     return (b<<4) | a;
   - target_extension: "sse"
     ctype: ["float"]
     lscpu_flags: ['sse']
     implementation: "return _mm_movemask_ps(vec_mask);"
   - target_extension: "sse"
     ctype: ["int32_t", "uint32_t"]
     lscpu_flags: ['sse', 'sse2']
     implementation: "return _mm_movemask_ps(_mm_castsi128_ps(vec_mask));"
   - target_extension: "sse"
     ctype: ["int64_t", "uint64_t"]
     lscpu_flags: ['sse2']
     implementation: "return _mm_movemask_pd(_mm_castsi128_pd(vec_mask));"
   - target_extension: "sse"
     ctype: ["double"]
     lscpu_flags: ['sse2']
     implementation: "return _mm_movemask_pd(vec_mask);"
#ARM - NEON
#todo: ARM IMPLEMENTATION for other bitwidths
   - target_extension: "neon"
     ctype: "int64_t"
     lscpu_flags: [ 'neon' ]
     is_native: False
     implementation: "return ( ( vec_mask[ 1 ] >> 62 ) & 0b10 ) | ( vec_mask[ 0 ] >> 63 );"
#SCALAR
   - target_extension: "scalar"
     ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
     lscpu_flags: []
     implementation: "return (vec_mask)? 1 : 0;"
...
#---
#primitive_name: "get_msb"
#brief_description: "Retrieves the most significant bit of every element in a vector register and sets the corresponding bit in a base type."
#parameters:
#   - ctype: "const typename Vec::register_type"
#     name: "vec"
#     description: "Vector mask register containing mask style data."
#returns:
#   ctype: "typename Vec::base_type"
#   description: "Integral value representing the vector mask register."
#definitions:
##INTEL - AVX512
#   - target_extension: "avx512"
#     ctype: "int64_t"
#     lscpu_flags: ['avx512f', 'avx512dq']
#     implementation: "return _mm512_movepi64_mask( vec );"
##INTEL - AVX2
#   - target_extension: "avx2"
#     ctype: "int64_t"
#     lscpu_flags: [ 'avx' ]
#     implementation: "return _mm256_movemask_pd( _mm256_castsi256_pd( vec ) );"
##INTEL - SSE
#   - target_extension: "sse"
#     ctype: "int64_t"
#     lscpu_flags: [ 'sse2' ]
#     implementation: "return _mm_movemask_pd( _mm_castsi128_pd( vec ) );"
##ARM - NEON
#   - target_extension: "neon"
#     ctype: "int64_t"
#     lscpu_flags: [ 'neon' ]
#     is_native: False
#     implementation: "return ( ( vec[ 1 ] >> 62 ) & 0b10 ) | ( vec[ 0 ] >> 63 );"
#...
---
primitive_name: "to_vector"
brief_description: "Forms an vector register from an integral where all bits are set in a lane if the corresponding mask bit is set to 1."
parameters:
   - ctype: "const typename Vec::mask_type"
     name: "mask"
     description: "Vector mask register containing mask style data."
returns:
   ctype: "typename Vec::register_type"
   description: "Integral value representing the vector mask register."
definitions:
#INTEL - AVX512
   - target_extension: "avx512"
     ctype: ["int32_t", "uint32_t", "int64_t", "uint64_t"]
     lscpu_flags: ['avx512f']
     implementation: "return _mm512_maskz_set1_epi{{ intrin_tp[ctype][1] }}( mask, -1 );"
   - target_extension: "avx512"
     ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t"]
     lscpu_flags: ["avx512bw"]
     implementation: "return _mm512_maskz_set1_epi{{ intrin_tp[ctype][1] }}( mask, -1 );"
   - target_extension: "avx512"
     ctype: ["float"]
     lscpu_flags: ['avx512f']
     implementation: "return _mm512_castsi512_ps(_mm512_maskz_set1_epi32(mask, -1));"
   - target_extension: "avx512"
     ctype: ["double"]
     lscpu_flags: ['avx512f']
     implementation: "return _mm512_castsi512_pd(_mm512_maskz_set1_epi64(mask, -1));"
#INTEL - AVX2
   - target_extension: "avx2"
     ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
     lscpu_flags: ['avx']
     implementation: "return mask; //mask is a vector already."
#INTEL - SSE
   - target_extension: "sse"
     ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
     lscpu_flags: ['sse2']
     implementation: "return mask; //mask is a vector already."
#ARM - NEON
   - target_extension: "neon"
     ctype: "int64_t"
     lscpu_flags: [ 'neon' ]
     implementation: "return vreinterpretq_s64_u64( mask ); //mask is a vector already."
...
#---
#primitive_name: "mask_reduce"
#brief_description: "Masks out every non relevant bit."
#parameters:
#   - ctype: "const typename Vec::base_type"
#     name: "mask"
#     description: "Integral value containing n (set) bits."
#returns:
#   ctype: "typename Vec::base_type"
#   description: "Integral value with only relevant bits set (or not)."
#definitions:
##INTEL - AVX512
#   - target_extension: "avx512"
#     ctype: "int64_t"
#     lscpu_flags: ['avx512f']
#     implementation: "return mask & 0xFF; //mask is integral already."
##INTEL - AVX2
#   - target_extension: "avx2"
#     ctype: "int64_t"
#     lscpu_flags: [ 'avx' ]
#     implementation: "return mask & 0xF;"
##INTEL - SSE
#   - target_extension: "sse"
#     ctype: "int64_t"
#     lscpu_flags: [ 'sse2' ]
#     implementation: "return mask & 0x3;"
##ARM - NEON
#   - target_extension: "neon"
#     ctype: "int64_t"
#     lscpu_flags: [ 'neon' ]
#     implementation: "return mask & 0x3;"
#...
#---
#primitive_name: "insert_delim_zero"
#brief_description: "Inserts 0 into bitmask using provided mask."
#parameters:
#   - ctype: "typename Vec::mask_type"
#     name: "data"
#     description: "Data mask register (e.g., data=0b11001011)."
#   - ctype: "typename Vec::mask_type"
#     name: "mask"
#     description: "Vector mask register containing mask which is used to insert 0 bits (e.g., mask=0b110011)"
#returns:
#   ctype: "typename Vec::mask_type"
#   description: "Data mask with inserted 0 bits (e.g., 0010{from data}00{because mask is 0 }11{from data})."
#definitions:
#INTEL - AVX512
#   - target_extension: "avx512"
#     ctype: "uin64_t"
#     lscpu_flags: ['bmi2']
#     implementation: "return _pdep64; //mask is integral already."
#INTEL - AVX2
#   - target_extension: "avx2"
#     ctype: "int64_t"
#     lscpu_flags: [ 'avx' ]
#     implementation: "return _mm256_movemask_pd( _mm256_castsi256_pd( vec_mask ) );"
#INTEL - SSE
#   - target_extension: "sse"
#     ctype: "int64_t"
#     lscpu_flags: [ 'sse2' ]
#     implementation: "return _mm_movemask_pd( _mm_castsi128_pd( vec_mask ) );"
#ARM - NEON
#   - target_extension: "neon"
#     ctype: "int64_t"
#     lscpu_flags: [ 'neon' ]
#     is_native: False
#     implementation: "return ( ( vec_mask[ 1 ] >> 62 ) & 0b10 ) | ( vec_mask[ 0 ] >> 63 );"
#...