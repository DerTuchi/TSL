name: 'tsl-validate-pr'

on:
  pull_request:
    branches: ['main']
    types: ['opened', 'reopened', 'synchronize']
permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      -
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      -
        name: 'Install packages for generator'
        run: |
          sudo apt-get update
          sudo apt-get install graphviz-dev util-linux
      -
        name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - 
        name: Cache virtualenv
        uses: actions/cache@v3
        id: cache-venv
        with:
          path: ./.venv/
          key: ${{ runner.os }}-${{ matrix.python-version }}-venv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-venv-
      -
        name: 'Install python dependencies for generator'
        run: |
          python -m venv ./.venv
          source ./.venv/bin/activate
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        #if: steps.cache-venv.outputs.cache-hit != 'true'
      - 
        name: 'Lint with ruff'
        run: |
          # stop the build if there are Python syntax errors or undefined names
          set -x
          source ./.venv/bin/activate
          pip install ruff
          PYTHONV="py${{ matrix.python-version }}"
          CURRENT_VERSION=$(echo $PYTHONV | sed 's/\.//')
          echo $CURRENT_VERSION
          #ruff --format=github --select=E9,F63,F7,F82 --target-version="${CURRENT_VERSION}" -v .
          ruff check --ignore E501,F541,F401,F841,E731 --target-version="${CURRENT_VERSION}" -v .
      -
        name: 'Lint primitive data'
        run: |
          source ./.venv/bin/activate
          pip install yamllint
          yamllint -d relaxed ./primitive_data
  generate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    needs: [lint]
    steps:
      -
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      -
        name: 'Install packages for generator'
        run: |
          sudo apt-get update
          sudo apt-get install graphviz-dev util-linux
      -
        name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Cache virtualenv
        uses: actions/cache@v3
        id: cache-venv
        with:
          path: ./.venv/
          key: ${{ runner.os }}-${{ matrix.python-version }}-venv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-venv-  
      -
        name: 'Install python dependencies for generator'
        run: |
          python -m venv ./.venv
          source ./.venv/bin/activate
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        #if: steps.cache-venv.outputs.cache-hit != 'true'
      - 
        name: Try generating the whole TSL with python ${{ matrix.python-version }}
        run: |
          source ./.venv/bin/activate
          python main.py -o tmp

  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: ["clang++", "g++"]
    needs: [lint, generate]
    steps:
      -
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      -
        name: 'Install packages for generator'
        run: |
          sudo apt-get update
          sudo apt-get install graphviz-dev util-linux
      -
        name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Cache virtualenv
        uses: actions/cache@v3
        id: cache-venv
        with:
          path: ./.venv/
          key: ${{ runner.os }}-3.10-venv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-3.10-venv-
      -
        name: 'Install python dependencies for generator'
        run: |
          python -m venv ./.venv
          source ./.venv/bin/activate
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip3 install -r requirements.txt; fi
        #if: steps.cache-venv.outputs.cache-hit != 'true'
      -
        name: 'Install packages for generated code'
        run: |
          sudo apt-get update
          sudo apt-get install build-essential cmake g++ lsb-release wget software-properties-common gnupg
          wget https://apt.llvm.org/llvm.sh
          sudo chmod +x llvm.sh
          yes "" | sudo ./llvm.sh 17
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-17 100
      -
        name: 'Run CMake'
        # "-DTSL_GENERATOR_OPTS=--no-workaround-warnings;${{ matrix.generator_opts }}"
        env:
          CXX: ${{ matrix.compiler }}
        run: |
          source ./.venv/bin/activate
          python main.py --targets $(LANG=en;lscpu|grep -i flags | tr ' ' '\n' | grep -v -E '^Flags:|^$' | sort -d | tr '\n' ' ') -o tsl_lib
          cmake -S . -B tsl -DUSE_EXISTING_TSL_PATH=./tsl_lib
      -
        name: 'Upload generated TSL as artifact'
        uses: actions/upload-artifact@v3
        with:
          name: tsl_${{ github.event.pull_request.head.sha }}
          path: ./tsl
          retention-days: 2
      -
        name: 'Build TSL'
        run: make -j -C tsl
      -
        name: 'Run Tests'
        run: ./tsl/tsl_lib/build/src/test/tsl_test

  validate-lscpu-flags:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target_flags: 
          - "sse"
          - "sse;sse2"
          - "sse;sse2;ssse3"
          - "sse;sse2;ssse3;sse4_1"
          - "sse;sse2;ssse3;sse4_1;sse4_2"
          - "sse;sse2;ssse3;sse4_1;sse4_2;avx"
          - "sse;sse2;ssse3;sse4_1;sse4_2;avx;avx2"
          - "sse;sse2;ssse3;sse4_1;sse4_2;avx;avx2;avx512f"
          - "sse;sse2;ssse3;sse4_1;sse4_2;avx;avx2;avx512f;avx512cd;avx512er;avx512pf" #avx3.1
          - "sse;sse2;ssse3;sse4_1;sse4_2;avx;avx2;avx512f;avx512cd;avx512bw;avx512dq;avx512vl" #avx3.2
    needs: [lint, generate]
    steps:
      -
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      -
        name: 'Install packages for generator'
        run: |
          sudo apt-get update
          sudo apt-get install graphviz-dev util-linux
      -
        name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Cache virtualenv
        uses: actions/cache@v3
        id: cache-venv
        with:
          path: ./.venv/
          key: ${{ runner.os }}-3.10-venv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-3.10-venv-
      -
        name: 'Install python dependencies for generator'
        run: |
          python -m venv ./.venv
          source ./.venv/bin/activate
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip3 install -r requirements.txt; fi
        #if: steps.cache-venv.outputs.cache-hit != 'true'
      -
        name: 'Install packages for generated code'
        run: |
          sudo apt-get update
          sudo apt-get install build-essential cmake g++ lsb-release wget software-properties-common gnupg
          wget https://apt.llvm.org/llvm.sh
          sudo chmod +x llvm.sh
          yes "" | sudo ./llvm.sh 17
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-17 100
      -
        name: 'Run CMake'
        id: cmake
        run: |
          which python3
          source ./.venv/bin/activate
          HW_LIST=$(LANG=en;lscpu|grep -i flags | tr ' ' '\n' | grep -v -E '^Flags:|^$' | sort -d | tr '\n' ';')
          IFS=";" read -ra TARGET_FLAGS <<< "${{ matrix.target_flags }}"
          IFS=";" read -ra HW_FLAGS <<< "${HW_LIST}"
          ANY_TARGET_FLAG_FOUND=0
          for i in "${TARGET_FLAGS[@]}"; do
            if [[ " ${HW_FLAGS[*]} " =~ " ${i} " ]]; then
              echo "Seems to be an intel CPU since ${i} is supported."
              ANY_TARGET_FLAG_FOUND=1
              break
            fi
          done
          if [ $ANY_TARGET_FLAG_FOUND -eq 1 ]; then
            ORIG_FLAGS="${{ matrix.target_flags }}"
            FLAGS="${ORIG_FLAGS//;/ }"
            echo "Generation for $FLAGS"
            python main.py --targets $FLAGS -o tsl_lib
            cmake -S . -B tsl -DUSE_EXISTING_TSL_PATH=./tsl_lib
          else
            echo "GENERATED=SKIPPED" >> $GITHUB_OUTPUT
          fi
      -
        name: 'Build TSL'
        if: steps.cmake.outputs.GENERATED != 'SKIPPED'
        run: make -j -C tsl

  integration:
    runs-on: ubuntu-latest
    needs: [validate-lscpu-flags, build-and-test, generate]
    steps:
      -
        name: Checkout main
        uses: actions/checkout@v3
      - 
        name: Checkout PR and merge
        uses: check-spelling/checkout-merge@v0.0.3
      -
        name: 'Install packages for generator'
        if: env.MERGE_FAILED != '1'
        run: |
          sudo apt-get update
          sudo apt-get install graphviz-dev util-linux
      -
        name: Set up Python 3.10
        if: env.MERGE_FAILED != '1'
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Cache virtualenv
        if: env.MERGE_FAILED != '1'
        uses: actions/cache@v3
        id: cache-venv
        with:
          path: ./.venv/
          key: ${{ runner.os }}-3.10-venv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-3.10-venv-
      -
        name: 'Install python dependencies for generator'
        if: env.MERGE_FAILED != '1' && steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv ./.venv
          source ./.venv/bin/activate
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip3 install -r requirements.txt; fi
      -
        name: 'Install packages for generated code'
        if: env.MERGE_FAILED != '1'
        run: |
          sudo apt-get update
          sudo apt-get install build-essential cmake g++ lsb-release wget software-properties-common gnupg
          wget https://apt.llvm.org/llvm.sh
          sudo chmod +x llvm.sh
          yes "" | sudo ./llvm.sh 17
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-17 100
      -
        name: 'Run CMake'
        if: env.MERGE_FAILED != '1'
        # "-DTSL_GENERATOR_OPTS=--no-workaround-warnings;${{ matrix.generator_opts }}"
        env:
          CXX: ${{ matrix.compiler }}
        run: |
          source ./.venv/bin/activate
          python main.py --targets $(LANG=en;lscpu|grep -i flags | tr ' ' '\n' | grep -v -E '^Flags:|^$' | sort -d | tr '\n' ' ') -o tsl_lib
          cmake -S . -B tsl -DUSE_EXISTING_TSL_PATH=./tsl_lib
      -
        name: 'Build TSL'
        if: env.MERGE_FAILED != '1'
        run: make -j -C tsl
      -
        name: 'Run Tests'
        if: env.MERGE_FAILED != '1'
        run: ./tsl/tsl_lib/build/src/test/tsl_test
