{% macro abort(error) %}
    {{ None['[ERROR] ' ~ error][0] }}
{% endmacro %}
{% if vector_length_agnostic and vector_length_bits != 0 %}
    {{ abort("A specialization can be either vector length agnostic or have a vector-length-dependent specialization.") }}
{% endif %}
{% set ns = namespace(
   full_extension_name='',
   partial_specialized=False,
   contains_parameter_pack=False,
   parameter_pack_typenames_str='',
   full_qualified_parameters_str='',
   parameters_str='',
   parameters_types='',
   using_return_type='',
   return_template_type='',
   additional_templates='',
   additional_non_specialized_template_params='',
   additional_specialized_template_params='',
   additional_target_extension='',
   additional_default_param='',
   simd_register_length=''
) %}
{% set ns.full_extension_name = target_extension ~ '<' ~ ctype ~ '>' %}
{% if ctype == 'T' %}
    {% set ns.partial_specialized = True %}
{% endif %}
{% for param in parameters %}
    {% set comma = ', ' if not loop.last else '' %}
    {% if param.get('is_parameter_pack', False) %}
        {% set ns.contains_parameter_pack = True %}
        {% set ns.parameter_pack_typenames_str = ns.parameter_pack_typenames_str ~ 'typename... ' ~ param['ctype'] ~ comma %}
        {% set ns.full_qualified_parameters_str = ns.full_qualified_parameters_str ~ param['ctype'] ~ '... ' ~ param['name'] ~ comma %}
        {% set ns.parameters_str = ns.parameters_str ~ param['name'] ~ '...' ~ comma %}
        {% set ns.parameters_types = ns.parameters_types ~ param['ctype'] ~ '... ' ~ comma %}
    {% else %}
        {% set decl_attribs = param['declaration_attributes'] ~ ' ' if param.get('declaration_attributes') else '' %}
        {% set attribs = ' ' ~ param['attributes'] ~ ' ' if param.get('attributes') else ' ' %}
        {% set ns.full_qualified_parameters_str = ns.full_qualified_parameters_str ~ decl_attribs ~ param['name'] ~ ' : ' ~ ctype ~ comma %}
        {% set ns.parameters_str = ns.parameters_str ~ param['name'] ~ comma %}
        {% set ns.parameters_types = ns.parameters_types ~ param['ctype'] ~ comma %}
    {% endif %}
{% endfor %}
{% if additional_simd_template_parameter["name"] != "" %}
    {% if additional_simd_template_extension != "" and additional_simd_template_base_type != "" %}
        {% set temp = additional_simd_template_extension ~ '<' ~ additional_simd_template_base_type ~ '>' %}
        {% set ns.additional_specialized_template_params = ', ' ~ temp %}
        {% set ns.additional_target_extension = temp %}
    {% elif additional_simd_template_extension != "" %}
        {% set temp = additional_simd_template_extension ~ '<' ~ ctype ~ '>' %}
        {% set ns.additional_specialized_template_params = ', ' ~ temp %}
        {% set ns.additional_target_extension = temp %}
    {% elif additional_simd_template_base_type != "" %}
        {% set temp = target_extension ~ '<' ~ additional_simd_template_base_type ~ '>' %}
        {% set ns.additional_specialized_template_params = ', ' ~ temp %}
        {% set ns.additional_target_extension = temp %}
    {% elif additional_simd_template_parameter["default_value"] != "" %}
        {% set ns.additional_specialized_template_params = ', ' ~ additional_simd_template_parameter["default_value"] %}
        {% set ns.additional_target_extension = additional_simd_template_parameter["default_value"] %}
    {% else %}
        {% set ns.additional_specialized_template_params = ', ' ~ ns.full_extension_name %}
        {% set ns.additional_target_extension = ns.full_extension_name %}
    {% endif %}
    {% set ns.using_return_type = 'using ' ~ additional_simd_template_parameter["name"] ~ ' = simd<' ~ additional_simd_template_base_type ~ ', ' ~ ns.additional_target_extension ~ ns.simd_register_length ~ '>;' %}
    {% set ns.return_template_type = 'simd<' ~ additional_simd_template_base_type ~ ', ' ~ ns.additional_target_extension ~ ns.simd_register_length ~ '>, ' %}
{% endif %}
{% set ns.additional_templates = '< const Idof: bool ' %}
{% if additional_non_specialized_template_parameters|length > 0 %}
    {% set ns.additional_templates = ns.additional_templates ~ ', ' %}
    {% for parameter_dict in additional_non_specialized_template_parameters %}
        {% set loop_comma = '' if loop.first else ', ' %}
        {% set ns.additional_templates = ns.additional_templates ~ loop_comma ~ 'const ' ~ parameter_dict["name"] ~ ' : ' ~ parameter_dict["ctype"] %}
        {% if parameter_dict["default_value"] != "" %}
            {% set ns.additional_default_param = ns.additional_default_param ~ ', ' ~ parameter_dict["name"] %}
        {% else %}
            {% set ns.additional_non_specialized_template_params = ns.additional_non_specialized_template_params ~ loop_comma ~ parameter_dict["name"] %}
        {% endif %}
    {% endfor %}
    {% set ns.additional_non_specialized_template_params = ns.additional_non_specialized_template_params ~ ", " %}
{% endif %}
{% set ns.additional_templates = ns.additional_templates ~ '>' %}
{# Every implementation is in the (nested) namespace "details" #}

impl{{ns.additional_templates}} SimdPrimitiveImpl for {{ functor_name }}<Idof, {{ns.additional_non_specialized_template_params}}{{ ns.full_extension_name }}{{ns.additional_specialized_template_params}}{{ns.additional_default_param}}> {
    /**
     * @brief: Template specialization of implementation for "{{ functor_name }}" (primitive {{ primitive_name }}).
     * @details:
     * Target Extension: {{ target_extension }}.
     *        Data Type: {{ ctype }}
     *  Extension Flags: {{ lscpu_flags }}
     {% if yaml_origin_line and yaml_origin_file %}
     *      Yaml Source: {{ yaml_origin_file }}::{{ yaml_origin_line }}
     {% endif %}
     {% if specialization_comment != "" %}
     * @note: {{ specialization_comment }}
     {% endif %}
     */

    type BaseType = {{ctype}};
    type TargetExtension = {{ns.full_extension_name}};
    type AdditionalParam = {{ ns.additional_target_extension if additional_simd_template_parameter["name"] != "" else '()' }};
    type RegisterType = <Self::TargetExtension as TargetExtension>::RegisterType;
    type ImaskType = <Self::TargetExtension as TargetExtension>::ImaskType;
    type MaskType = <Self::TargetExtension as TargetExtension>::MaskType;
    type OffsetBaseType = <Self::TargetExtension as TargetExtension>::OffsetBaseType;
    type OffsetBaseRegisterType = <Self::TargetExtension as TargetExtension>::OffsetBaseRegisterType;
    type Args = ({{ns.parameters_types}});
    type ReturnType = {{ '()' if returns['ctype'] == 'void' else returns['ctype']}};
    const IS_NATIVE: bool = {{ 'true;' if is_native else 'false;' }}
    const PARAMETERS_QUERYABLE : bool = {{ 'true' if ns.contains_parameter_pack else 'false' }};
    const HAS_RETURN_VALUE : bool = {{ 'true' if returns['ctype'] != 'void' else 'false' }};
    {% if not is_native %}
    const CHECK: () = assert!(Self::is_native == Idof, "The primitive '{{ functor_name }}' is not supported by your hardware natively while it is forced by using native");
    {% else %}
    const CHECK: () = (); // function is native so no check for Idof needed.
    {% endif %}

    {{ '#[must_use] ' if returns['ctype'] != 'None' else ''}}
    {{ '#[inline(always)]' if force_inline else '' }}
    unsafe fn apply(args: Self::Args) -> Self::ReturnType{
        let _ = Self::CHECK;
        let ({{ns.parameters_str}}) = args;
        {{ implementation }}
    }
} // end of struct {{ functor_name }} for template specialization of {{ functor_name }} for {{ target_extension }} using {{ ctype }}.
