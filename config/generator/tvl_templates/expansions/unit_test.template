
#define CATCH_CONFIG_MAIN
#include "catch.hpp"

{% for primitive_class_test in tests %}
{%    for primitive_test in primitive_class_test['primitive_tests'] %}
{%       for case in primitive_test['cases'] %}
template<VectorProcessingStyle {{ primitive_test['vector_name'] }}>
   bool test_{{ case['primitive_name'] }}_{{ case['test_name'] }}() {
      using namespace {{ tvl_namespace }};
      {{ case['implementation'] }}
   }
{%       endfor %}
{%    endfor %}
{% endfor %}


{% for primitive_class_test in tests %}
{%    for primitive_test in primitive_class_test['primitive_tests'] %}
{%       for extension in known_extensions %}
TEST_CASE("Testing primitive {{ primitive_test['primitive_name'] }} for {{ extension }}", "[{{ primitive_test['primitive_name'] }}],[{{ extension }}]") {
   using namespace {{ tvl_namespace }};
{%             for case in primitive_test['cases'] %}
   SECTION("{{ case['test_name'] }}") {
{%                   if extension not in case['complete_tests_lib_definitions'] %}
{%                      set resolved = False %}
{%                      if case['missing_required_primitive_definitions'] is not none %}
{%                         if extension in case['missing_required_primitive_definitions'] %}
{%                            set resolved = True %}
{%                            for ctype in case['missing_required_primitive_definitions'][extension] %}
      WARN("Can't run. Required primitive(s) {{ case['missing_required_primitive_definitions'][extension][ctype] }} not provided.");
{%                            endfor %}
{%                         endif %}
{%                      endif %}
{%                      if extension in case['missing_previous_tests'] and not resolved %}
{%                         set resolved = True %}
{%                         for ctype in case['missing_required_primitive_definitions'][extension] %}
      WARN("Unreliable test. Required tests for primitive(s) {{ case['missing_previous_tests'][extension][ctype] }} not provided.");
      CHECK(test_{{ case['primitive_name'] }}_{{ case['test_name'] }}<simd<{{ ctype }}, {{ extension }}>>());
{%                         endfor %}
{%                      endif %}
{%                      if not resolved %}
      WARN("Primitive {{ case['primitive_name'] }} not implementend for {{ extension }}");
{%                      endif %}
{%                   else %}
{%                      for ctype in known_ctypes %}
{%                         if ctype in case['complete_tests_lib_definitions'][extension] %}
      CHECK(test_{{ case['primitive_name'] }}_{{ case['test_name'] }}<simd<{{ ctype }}, {{ extension }}>>());
{%                         else %}
{%                            set resolved = False %}
{%                            if case['missing_required_primitive_definitions'] is not none %}
{%                               if extension in case['missing_required_primitive_definitions'] %}
{%                                  if ctype in case['missing_required_primitive_definitions'][extension] %}
{%                                     set resolved = True %}
      WARN("Can't run. Required primitive(s) {{ case['missing_required_primitive_definitions'][extension][ctype] }} not provided.");
{%                                  endif %}
{%                               endif %}
{%                            endif %}
{%                            if extension in case['missing_previous_tests'] and not resolved %}
{%                               if ctype in case['missing_required_primitive_definitions'][extension] %}
{%                                  set resolved = True %}
      WARN("Unreliable test. Required tests for primitive(s) {{ case['missing_previous_tests'][extension][ctype] }} not provided.");
      CHECK(test_{{ case['primitive_name'] }}_{{ case['test_name'] }}<simd<{{ ctype }}, {{ extension }}>>());
{%                               endif %}
{%                            endif %}
{%                            if not resolved %}
      WARN("Primitive {{ case['primitive_name'] }}<simd<{{ ctype }}, {{ extension }}>> not implementend.");
{%                            endif %}
{%                         endif %}
{%                      endfor %}
{%                   endif %}
   }
{%             endfor %}
}
{%       endfor %}
{%    endfor %}
{% endfor %}
