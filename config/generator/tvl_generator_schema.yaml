---
includes: &includes_schema
   type: "list"
   default: []
   entry_type: "str"
   brief: "A list of includes which are required."

custom_type: &custom_type_schema
   required:
      name:
         type: "str"
         brief: "Name of custom type."
         example: "gpu_reg_t"
      struct_code:
         type: "str"
         brief: "Implementation code for custom type struct."
extension:
   required:
      vendor:
         type: "str"
         brief: "Vendor Name."
         example: "'intel'"
      extension_name:
         type: "str"
         brief: "Extension Name (used as filename)."
         example: "'avx512'"
      lscpu_flags: &lscpu_flags_schema
         type: "list"
         entry_type: "str"
         brief: "List of extension specific flags, exposed by using lscpu."
         example: "[ 'avx512cd', 'avx512f' ]"
      simdT_name:
         type: "str"
         brief: "Extension Name which will be used inside the TVL."
         example: "'avx512'"
      simdT_register_type:
         type: "str"
         brief: "Vector register type, depending on the base type."
         example: "BaseType"
      simdT_mask_type:
         type: "str"
         brief: "Mask type, depending on the base type."
   optional:
      simdT_integral_mask_type:
         type: "str"
         brief: "Integral type for a mask. This may differ from the mask_type."
         default: "mask_t"
      language:
         type: "str"
         brief: "Language string used by cmake."
         default: "CXX"
         example: "'CXX' or 'CUDA'"
      needs_arch_flags:
         type: "bool"
         brief: "Indicates, whether the lscpu-flags should be used as compiler flags."
         default: True
      custom_types:
         type: "list"
         entry_type: *custom_type_schema
         brief: "List of custom types."
         default: []
      simdT_default_size_in_bits:
         type: "int"
         brief: "Default size of a vector register for the specific extension in bits."
         default: 0
         example: 512
      simdT_register_type_attributes:
         type: "str"
         brief: "Additional attributes of vector type."
         example: "__attribute__((vector_size(64), __may_alias__, _aligned_(64)))"
         default: ""
      description:
         type: "str"
         brief: "A description of the SIMD extension which is used for doxygen generation."
         default: "todo."
      intrin_tp:
         type: "dict"
         brief: "If intrinsics follow a specific pattern (for instance by enconding type informations into intrinsic-names), this can be used to generate multiple primitivies."
         example: "{uint8_t: ['u', '8'], uint16_t: ['u', '16']}. Usage: vaddq_{{ intrin_tp[ctype][0] }}{{ intrin_tp[ctype][1] }}"
         default: "{}"
      intrin_tp_full:
         type: "dict"
         brief: "If intrinsics follow a specific pattern (for instance by enconding type informations into intrinsic-names), this can be used to generate multiple primitivies."
         example: "{uint8_t: ['u', '8'], uint16_t: ['u', '16']}. Usage: vaddq_{{ intrin_tp_full[ctype] }}"
         default: "{}"
      arch_flags:
         type: "dict"
         brief: "Dictionary for mapping architecture flags to compiler related arcitecture flags. Only non-obvious mappings must be included in this dictionary."
         example: "{sse4_1: 'msse4.1', sse4_2: 'msse4.2'}"
         default: "{}"
      includes: *includes_schema

return: &return_schema
   required:
      ctype:
         type: "str"
         brief: "TVL type of the parameter with all cvref qualifiers."
         example: "Vec::vector_type const &"
   optional:
      description:
         type: "str"
         brief: "A short description of the parameter."
         default: "todo."

parameter: &parameter_schema
   required:
      ctype:
         type: "str"
         brief: "TVL type of the parameter with all cvref qualifiers."
         example: "Vec::vector_type const &"
      name:
         type: "str"
         brief: "Name of the parameter."
   optional:
      default_value:
         type: "str"
         brief: "A default value."
         default: ""
      declaration_attributes:
         type: "str"
         brief: "Parameter declaration attributes"
         example: "[[maybe_unused]]"
         default: ""
      attributes:
         type: "str"
         brief: "Parameter attributes."
         example: "__restrict__"
         default: ""
      description:
         type: "str"
         brief: "A short description of the parameter."
         default: "todo."
      is_parameter_pack:
         type: "bool"
         default: false
         brief: "A flag indicating whether the definition is using a 1-to-1 mapping (True) or whether it is some kind of a workaround (False)."

primitive_specialization_requirements: &definition_requirements_schema
   target_extension:
      type: "str"
      brief: "The TVL extension for which this definition is a specialization."
   ctype:
      type: "list"
      entry_type: "str"
      brief: "List of the C/C++ datatype(s) for which this definition is a specialization. If ctype == 'T', the specialization is base type agnostic."
      example: "['uint32_t', 'uint64_t'], ['uint64_t'], ['T']"
   lscpu_flags: *lscpu_flags_schema

primitive_specialization_optionals: &definition_optionals_schema
   is_native:
      type: "bool"
      default: True
      brief: "A flag indicating whether the definition is using a 1-to-1 mapping (True) or whether it is some kind of a workaround (False)."
   vector_length_bits:
      type: "int"
      default: 0
      brief: "The size of a vector register for the specific extension in bits. (default: 0 indicates that the default amount of bits - defined for the extension - will be used)."
   vector_length_agnostic:
      type: "bool"
      default: False
      brief: "Indicates, whether a Primitive specialization is agnostic to the actual vector length (default: False)."
   specialization_comment:
      type: "str"
      default: ""
      brief: "Brief description of the primitive."
   includes: *includes_schema

primitive_definition: &definition_schema
   required:
      <<: *definition_requirements_schema
      implementation:
         type: "str"
         brief: "The actual implementation for this definition."
   optional: *definition_optionals_schema

test_definition: &testing_schema
   required:
      implementation:
         type: "str"
         brief: "Implementation of a test case. If setup and teardown code is needed, this has to be placed inside the definition."
   optional:
      includes: *includes_schema
      implicitly_reliable:
         type: "bool"
         default: False
         brief: "Indicates that this primitive is assumed to be 'correct'. This is necessary to break dependency-cycles of different testcases, e.g., most of the primitives need the ability to transfer the result into memory (simd-store). Even a potential test for store would require store to be tested beforehand. To omit such cycles, one can flag a fundamental primitive as implicitly reliable. However, a valid test-implementation must be provided."
      test_name:
         type: "str"
         default: "default"
         brief: "Name of a specific test definition."
      requires:
         type: "list"
         entry_type: "str"
         default: []
         brief: "A list of required primitives for this test (excluded the current tested primitive)."

primitive:
   required:
      primitive_name:
         type: "str"
         brief: "Name of the primitive."
         example: "load"
   optional:
      testing:
         type: "list"
         entry_type: *testing_schema
         default: []
         brief: "Testing code."
      test_function_name:
         type: "str"
         brief: "@TODO"
         example: "test_add"
      tvl_implementation_namespace:
         type: "str"
         default: "functors"
         brief: "Namespace for template specializations."
      brief_description:
         type: "str"
         default: "todo."
         brief: "Brief description of the primitive."
      detailed_description:
         type: "str"
         default: "todo."
         brief: "Detailed description of the primitive."
      parameters:
         type: "list"
         default: []
         entry_type: *parameter_schema
         brief: "A list of necessary parameters for the primitive."
         example: "[{ctype: 'Vec::vector_type const &', name: 'a', description: 'first summand'}, {ctype: 'Vec::vector_type const &', name: 'b', description: 'second summand'}]"
      vector_name:
         type: "str"
         default: "Vec"
         brief: "The template class name which is referenced from the parameters and within the code."
      idof_name:
         type: "str"
         default: "Idof"
         brief: "The template class name which is used to care about the implementation degree of freedom."
      force_inline:
         type: "bool"
         default: True
         brief: "A flag indicating whether the primitive should be marked as ((always_inline)). (default = True)"
      returns:
         type: "dict"
         entry_type: *return_schema
         default: {"ctype": "void", "description": ""}
         brief: "The return type of the primitive. (default = void)"
      includes: *includes_schema
      definitions:
         type: "list"
         default: [ ]
         entry_type: *definition_schema
         brief: "A list of definitions for a specific primitive."

primitive_class: &primitive_class_schema
   required:
      name:
         type: "str"
         brief: "Name of the primitive class."
      description:
         type: "str"
         brief: "A description of the primitive class."
#      file:
#         type: "str"
#         brief: "A file, containing all primitives"
#
#primitive_classes:
#   optional:
#      classes:
#         type: "list"
#         default: []
#         entry_type: *primitive_class_schema
#         brief: "A list containing the primitive classes."
...