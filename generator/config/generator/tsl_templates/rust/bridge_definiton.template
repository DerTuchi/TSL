{% macro abort(error) %}
    {{ None['[ERROR] ' ~ error][0] }}
{% endmacro %}
{% if vector_length_agnostic and vector_length_bits != 0 %}
{{ abort("A specialization can be either vector length agnostig or have a vector-length-dependent specialization.") }}
{% endif %}
{% set ns = namespace(
   full_extension_name = '',
   partial_specialized=False,
   contains_template_parameter=False,
   contains_parameter_pack=False,
   parameter_pack_typenames_str='',
   full_qualified_parameters_str='',
   parameters_str='',
   parameters_types='',
   has_parameters_tuple=True,
   using_return_type='',
   return_template_type='',
   return_type = '',
   additional_templates='',
   additional_template_params='',
   additional_target_extension='',
   simd_register_length='') %}
{% if vector_length_agnostic %}
   {% set ns.simd_register_length = ', VectorSize' %}
   {% set ns.full_extension_name = 'simd<' ~ ctype ~ ', ' ~ target_extension ~ ns.simd_register_length ~ '>' %}
{% elif vector_length_bits != 0 %}
   {% set ns.simd_register_length = ', ' ~ vector_length_bits %}
   {% set ns.full_extension_name = 'simd<' ~ ctype ~ ', ' ~ target_extension ~ ns.simd_register_length~ '>' %}
{% else %}
   {% set ns.simd_register_length = ctype | filter_ctype_rust | filter_element_count (simdT_default_size_in_bits) %}
   {% set ns.full_extension_name = ctype | filter_ctype_rust ~ ', ' ~ target_extension %}
   {% set ns.return_type = 'std::array<' ~ ctype ~ ',' ~ ns.simd_register_length ~ '>'%}
{% endif %}
{% if ctype == 'T' %}
{% set ns.partial_specialized = True %}
{% endif %}
{% for param in parameters %}
   {% if not loop.last %}
      {% set comma = ', ' %}
   {% else %}
      {% set comma = '' %}
   {% endif %}
   {% if 'is_parameter_pack' in param and param['is_parameter_pack'] %}
      {% set ns.contains_parameter_pack = True %}
      {% set ns.parameter_pack_typenames_str = ns.parameter_pack_typenames_str ~ 'typename... ' ~ param['ctype'] ~ comma %}
      {% set ns.full_qualified_parameters_str = ns.full_qualified_parameters_str ~ param['ctype'] ~ '... ' ~ param['name'] ~ comma %}
      {% set ns.parameters_str = ns.parameters_str ~ param['name'] ~ '...' ~ comma %}
      {% set ns.parameters_types = ns.parameters_types ~ param['ctype'] ~ '... ' ~ comma %}
      {% set ns.has_parameters_tuple = False %}
   {% else %}
      {% if 'declaration_attributes' not in param or param['declaration_attributes'] == "" %}
      {% set decl_attribs = '' %}
      {% else %}
      {% set decl_attribs = param['declaration_attributes'] ~ ' ' %}
      {% endif %}
      {% if 'attributes' not in param or param['attributes'] == "" %}
      {% set attribs = ' ' %}
      {% else %}
      {% set attribs = ' ' ~ param['attributes'] ~ ' ' %}
      {% endif %}
      {% set ns.full_qualified_parameters_str = ns.full_qualified_parameters_str ~ 'std::array<'~ ctype ~ ', ' ~ param['arr_length'] ~ '> ' ~ param['name'] ~ '_data' ~ comma %}
      {% set ns.parameters_str = ns.parameters_str ~ param['name'] ~ comma %}
      {% set ns.parameters_types = ns.parameters_types ~ param['ctype'] ~ comma %}
   {% endif %}
{% endfor %}
{% if additional_simd_template_parameter["name"] != "" %}
    {% if additional_simd_template_extension != "" %}
        {% set ns.additional_target_extension = additional_simd_template_extension %}
    {% else %}
        {% set ns.additional_target_extension = target_extension %}
    {% endif %}
    {% set ns.using_return_type = 'using ' ~ additional_simd_template_parameter["name"] ~ ' = simd<' ~ additional_simd_template_base_type ~ ', ' ~ ns.additional_target_extension ~ ns.simd_register_length ~ '>;' %}
    {% set ns.return_template_type = 'simd<' ~ additional_simd_template_base_type ~ ', ' ~ ns.additional_target_extension ~ ns.simd_register_length ~ '>, ' %}
{% endif %}
{% if additional_non_specialized_template_parameters|length > 0 %}
{% for parameter_dict in additional_non_specialized_template_parameters %}
{% set loop_comma = '' if loop.first else ', ' %}
{% set ns.additional_templates = ns.additional_templates ~ loop_comma ~ parameter_dict["ctype"] ~ ' ' ~ parameter_dict["name"] %}
{% set ns.additional_template_params = ns.additional_template_params ~ loop_comma ~ parameter_dict["name"] %}
{% endfor %}
{% set ns.additional_templates = ns.additional_templates ~ ", " %}
{% set ns.additional_template_params = ns.additional_template_params ~ ", " %}
{% endif %}
{# Every implementation is in the (nested) namespace "details" #}
/**
    * @brief: Template specialization of implementation for "{{ functor_name }}" (primitive {{ primitive_name }}).
    * @details:
    * Target Extension: {{ target_extension }}.
    *        Data Type: {{ ctype }}
    *  Extension Flags: {{ lscpu_flags }}
    {% if yaml_origin_line and yaml_origin_file %}
    *      Yaml Source: {{ yaml_origin_file }}::{{ yaml_origin_line }}
    {% endif %}
    {% if specialization_comment != "" %}
    * @note: {{ specialization_comment }}
    {% endif %}
*/
{{ns.return_type}} {{ functor_name }}_{{target_extension}}_{{ctype | filter_ctype_rust}}({{ns.full_qualified_parameters_str}}){
    using Vec = simd<{{ctype}}, {{target_extension}}>;
    {% for param in parameters %}
    const {{ctype | filter_reg_cpp(simdT_default_size_in_bits, param['ctype'])}}* {{param['name']}}_ptr = reinterpret_cast<const {{ctype | filter_reg_cpp(simdT_default_size_in_bits, param['ctype'])}}*>({{param['name']}}_data.data());
    {{ctype | filter_reg_cpp(simdT_default_size_in_bits, param['ctype'])}} {{param['name']}} = *{{param['name']}}_ptr;
    {% endfor %}

    {{ implementation | filter_implementation('*reinterpret_cast<' ~ ns.return_type ~ '*>') }}
} // end of {{ functor_name }} for {{ target_extension }} using {{ ctype }}.