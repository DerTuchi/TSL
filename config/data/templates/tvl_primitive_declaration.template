{%- set ns = namespace(
   contains_template_parameter=False,
   contains_parameter_pack=False,
   parameter_pack_typenames_str='',
   full_qualified_parameters_str='',
   parameters_str='') -%}
{%- for param in parameters -%}
   {%- if not loop.last -%}
      {%- set comma = ', ' -%}
   {%- else -%}
      {% set comma = '' -%}
   {%- endif -%}
   {%- if param['is_parameter_pack'] -%}
      {%- set ns.contains_parameter_pack = True -%}
      {%- set ns.parameter_pack_typenames_str = ns.parameter_pack_typenames_str ~ 'typename... ' ~ param['ctype'] ~ comma -%}
      {%- set ns.full_qualified_parameters_str = ns.full_qualified_parameters_str ~ param['ctype'] ~ '... ' ~ param['name'] ~ comma -%}
      {%- set ns.parameters_str = ns.parameters_str ~ param['name'] ~ '...' ~ comma -%}
   {%- else -%}
      {%- set ns.full_qualified_parameters_str = ns.full_qualified_parameters_str ~ param['ctype'] ~ ' ' ~ param['attributes'] ~ ' ' ~ param['name'] ~ comma -%}
      {%- set ns.parameters_str = ns.parameters_str ~ param['name'] ~ comma -%}
   {%- endif -%}
{%- endfor -%}
{%- if ns.contains_parameter_pack -%}
 {%- set ns.parameter_pack_typenames_str = ', ' ~ ns.parameter_pack_typenames_str -%}
{%- endif -%}
{#- Every implementation is in the (nested) namespace "details" #}
   namespace {{ tvl_implementation_namespace }} {
      {#- This is the forward declaration of the actual primitive implementation struct #}
      template< VectorProcessingStyle {{ vector_name }}, ImplementationDegreeOfFreedom {{ idof_name }} >
      struct {{ primitive_name }}_impl{};
   } // end namespace {{ tvl_implementation_namespace }}
   {{ tvl_function_doxygen }}
   {#- This is the templated free function for the primitive which is called by the user of TVL. #}
   template< VectorProcessingStyle {{ vector_name }}, ImplementationDegreeOfFreedom {{ idof_name }} = workaround{{ ns.parameter_pack_typenames_str }} >
   {#- If the primitive returns something, the caller has to capture the result. #}
   {{ '[[nodiscard]] ' if return_type != 'void' else '' }}
   {#- If force_inline is set to True, we use TVL_FORCE_INLINE. #}
   {{ 'TVL_FORCE_INLINE ' if force_inline else '' -}}
   {{ returns['ctype'] }} {{ primitive_name }}(
      {{ ns.full_qualified_parameters_str }}
   ) {
   {#- If the function primitive implementation returns something we have to return it, otherwise we just call it. #}
      {{ 'return ' if returns['ctype'] != 'void' else '' -}}
   {#- Call the actual implementation with all parameters. -#}
      {{ tvl_implementation_namespace }}::{{ primitive_name }}_impl< {{ vector_name }}, {{ idof_name }} >::apply(
         {{ ns.parameters_str }}
      );
   }